name: Deploy PCE App (dev)

on:
  push:
    branches: [ "main" ]
    paths:
      - "packages/infra/**"
      - ".github/workflows/deploy-dev.yml"

permissions:
  id-token: write   # Required for OIDC
  contents: read

env:
  AWS_REGION: eu-north-1
  PCE_STAGE: dev
  PCE_ECR_REPO_NAME: pce-api-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # --- Checkout Repo ---
      - uses: actions/checkout@v4

      # --- AWS OIDC Auth ---
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590807097490:role/pce-dev-ci
          aws-region: ${{ env.AWS_REGION }}

      # --- Node & pnpm ---
      - name: Setup Node & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: corepack enable && corepack prepare pnpm@9 --activate

      # --- Resolve Digest ---
      - name: Resolve digest for tag
        id: digest
        run: |
          # Use GitHub commit SHA (short) as tag
          TAG="${GITHUB_SHA::12}"
          # fallback to a known working tag
          FALLBACK="dev-20250915-231431"
          DIGEST=$(aws ecr describe-images \
            --repository-name "$PCE_ECR_REPO_NAME" \
            --image-ids imageTag="$TAG" \
            --query "imageDetails[0].imageDigest" \
            --output text || true)
          if [ -z "$DIGEST" ] || [ "$DIGEST" = "None" ]; then
            echo "No digest for $TAG; falling back to $FALLBACK"
            TAG="$FALLBACK"
            DIGEST=$(aws ecr describe-images \
              --repository-name "$PCE_ECR_REPO_NAME" \
              --image-ids imageTag="$TAG" \
              --query "imageDetails[0].imageDigest" \
              --output text)
          fi
          echo "PCE_IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "PCE_IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "Resolved digest: $DIGEST"

      # --- Install Dependencies ---
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # --- CDK Synth ---
      - name: CDK Synth
        working-directory: packages/infra
        run: pnpm run synth

      # --- CDK Deploy (Immutable) ---
      - name: CDK Deploy (digest pinned)
        working-directory: packages/infra
        run: |
          export CDK_DEFAULT_REGION="$AWS_REGION"
          export CDK_DEFAULT_ACCOUNT="590807097490"
          export PCE_STAGE="dev"

          # Pull ECS ServiceName dynamically from CloudFormation outputs
          SVC=$(aws cloudformation describe-stacks --stack-name PceApp-dev \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceName'].OutputValue" \
            --output text)
          export PCE_SERVICE_NAME="$SVC"

          echo "Deploying with digest=$PCE_IMAGE_DIGEST and tag=$PCE_IMAGE_TAG"
          pnpm run deploy:app:immutable \
            -c stage=$PCE_STAGE \
            -c vpcId=${{ secrets.PCE_VPC_ID }} \
            -c taskSecurityGroupId=${{ secrets.PCE_TASK_SG_ID }} \
            -c clusterName=pce-dev-cluster \
            -c ecrRepoName=$PCE_ECR_REPO_NAME \
            -c imageDigest=$PCE_IMAGE_DIGEST \
            -c imageTag=$PCE_IMAGE_TAG \
            -c snsTopicArn=${{ secrets.PCE_SNS_TOPIC_ARN }}

      # --- Verify ECS Service ---
      - name: Verify ECS Service
        run: |
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name PceApp-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' \
            --output text)
          aws ecs describe-services \
            --cluster pce-dev-cluster \
            --services $SERVICE_NAME \
            --query "services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}" \
            --output json
