name: CI
on:
  push:
    branches: [main]
  pull_request:
permissions:
  id-token: write
  contents: read
jobs:
  cdk-synth:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590807097490:role/PceAppDev-GitHubOIDC
          aws-region: eu-north-1
      - run: echo "✅ CI wiring OK – starting synth"
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter @pce/infra run cdk synth
      - uses: actions/upload-artifact@v4
        with:
          name: cdk-template
          path: cdk.out/PceApp-dev.template.json
  resolve-digest:
    runs-on: ubuntu-latest
    needs: cdk-synth
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590807097490:role/PceAppDev-GitHubOIDC
          aws-region: eu-north-1
      - name: Resolve latest ECR digest
        id: digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name pce-api-dev \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageDigest' \
            --output text)
          echo "PCE_IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "Resolved digest: $DIGEST"
    outputs:
      digest: ${{ env.PCE_IMAGE_DIGEST }}
  deploy:
    runs-on: ubuntu-latest
    needs: resolve-digest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590807097490:role/PceAppDev-GitHubOIDC
          aws-region: eu-north-1
      - run: pnpm install --frozen-lockfile
      - uses: actions/download-artifact@v4
        with:
          name: cdk-template
          path: cdk.out
      - run: |
          pnpm --filter @pce/infra run cdk deploy PceApp-dev \
            --require-approval never \
            -c stage=dev \
            -c vpcId=${{ secrets.PCE_VPC_ID }} \
            -c taskSecurityGroupId=${{ secrets.PCE_TASK_SG_ID }} \
            -c clusterName=pce-dev-cluster \
            -c ecrRepoName=pce-api-dev \
            -c imageDigest=${{ env.PCE_IMAGE_DIGEST }} \
            -c imageTag=dev-$(date +%Y%m%d-%H%M%S) \
            -c snsTopicArn=${{ secrets.PCE_SNS_TOPIC_ARN }}
      - name: Verify ECS Service
        run: |
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name PceApp-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' \
            --output text)
          aws ecs describe-services \
            --cluster pce-dev-cluster \
            --services $SERVICE_NAME \
            --query "services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}" \
            --output json
